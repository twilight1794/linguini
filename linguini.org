#+TITLE: Referencia de Linguini 2.0
#+DATE: 2021-12-06
#+LANGUAGE: es
#+AUTHOR: Giovanni Alfredo Garciliano Díaz
#+EMAIL: rapunzel@disroot.org

* Introducción
Linguini es un lenguaje de programación sencillo y ligero, diseñado principalmente para ser fácil de entender y escribir para las personas hispanohablantes que inician en la programación. La sintaxis evita las construcciones complejas, y en su lugar, usa muchas palabras clave explícitas en vez de símbolos.

Linguini es principalmente de paradigma imperativo, pero a la vez está completamente basado en objetos. Tiene un sistema de tipado fuerte, y los programas son ejecutados en una máquina virtual.

Linguini es software libre y de código abierto, licenciado bajo la [[https://www.gnu.org/licenses/gpl-3.0.html][Licencia Pública General de GNU, versión 3.0]] o posterior. La versión más reciente de esta referencia puede encontrarse en [[https://www.raiponce.xyz/proyectos/linguini/2.0]].

* Historia
Inicialmente diseñé Linguini para cumplir con el proyecto final de primer semestre de la clase de Fundamentos de Programación, en la carrera de Ingeniería en computación, en la Universidad Nacional Autónoma de México. La primera versión del lenguaje, 1.0, la entregué en dicha asignación, pero a pesar de cumplir muy bien su función, su código tiene varios defectos de diseño que deben ser corregidos.

La segunda versión, 2.0, corrige éstos y otros errores, a la vez que añade nuevas características, y es la versión que entregaré como proyecto final de tercer semestre de la clase de Estructuras de Datos y Algoritmos II.

El nombre del lenguaje, Linguini, viene del apodo que el grupo de la clase de primer semestre adjudicó al profesor que la impartía, aludiendo al parecido que tiene con el personaje de /Linguini Gusteau/, de la película /Ratatouille/.

* Conceptos básicos
** Valores
Linguini es un lenguaje de tipado estático, es decir, todas las variables declaradas son referencias a instancias de una clase específica, que no cambia a lo largo de toda la vida de la variable. Y no solo las variables: todos los valores son instancias de una clase específica.

Linguini viene con 8 clases nativas, que representan todos los tipos de datos básicos que usa el lenguaje: [[*Objeto][~Objeto~]], [[*Entero][~Entero~]], [[*Decimal][~Decimal~]], [[*Cadena][~Cadena~]], [[*Lista][~Lista~]], [[*Funcion][~Funcion~]], [[*Logico][~Logico~]] y [[*Modulo][~Modulo~]], detalladas en la sección /[[*Clases incluidas en el sistema][Clases incluidas en el sistema]]/. Todas ellas pueden ser derivadas para crear clases personalizadas.

A diferencia de otros lenguajes, en Linguini no existe el concepto de valor nulo. Al declarar una variable, ésta se inicializa inmediatamente con su valor predeterminado.

** Ámbito
En Linguini prácticamente todos los objetos pertenecen a un ámbito espacial y temporal determinado, es decir, que casi ningún objeto puede estar accesible siempre y desde cualquier punto: en general todos los objetos pertenecen a un bloque, sea un módulo, un programa o una función. Esto quiere decir que si declaramos una variable al inicio de un programa, esta variable no estará disponible fuera de ese programa, por ejemplo, en un módulo importado.

La única excepción son las clases incluidas de serie, mencionadas arriba: se pueden declarar objetos de estas clases desde cualquier ubicación del programa.

** Errores
En Linguini no hay un método para tratar errores durante la ejecución del programa. Cualquier ocurrencia de una excepción hará que Linguini finalice inmediatamente.

Sin embargo, durante el desarrollo puede ser de mucha ayuda detectar la veracidad de ciertas condiciones, y detener el programa si es necesario. Para ello se provee de la biblioteca ~Aseveracion~.

** Metamétodos
Todos los objetos en Linguini poseen unas funciones especiales llamadas /metamétodos/. Estos métodos definen el comportamiento de los objetos cuando ocurren ciertos eventos, o se usan con ciertos operadores. Por ejemplo, hay un metamétodo para definir cómo debe actuar un objeto cuando se usa con el operador de suma, cuando se compara con otro objeto, o cuando se convierte el objeto implícitamente a una cadena. Como comparación, la idea es prácticamente la misma que los métodos mágicos en Python, o los metavalores de Lua.

Linguini define muchos metamétodos de serie para las clases del sistema, pero se pueden definir nuevos metamétodos para clases nuevas, e incluso se puede redefinir los metamétodos incluidos (pero debe tenerse cuidado de no estropear el funcionamiento normal de la clase). Como cualquier método más, los metamétodos también se heredan.

La siguiente tabla detalla todas las metamétodos que Linguini reconoce. Todos los identificadores de los metamétodos comienzan por ~__~.

#+NAME: Metamétodos
|--------------------+--------------------------------------|
| Metamétodo         | Descripción                          |
|--------------------+--------------------------------------|
| ~__suma~           | Suma (~+~)                           |
| ~__resta~          | Resta (~-~)                          |
| ~__multiplicacion~ | Multiplicación (~*~)                 |
| ~__division~       | División (~/~)                       |
| ~__resto~          | Resto de una división (~%~)          |
| ~__potencia~       | Potencia (~^~)                       |
| ~__raiz~           | Raíz (~$~)                           |
| ~__mayorque~       | Comparación mayor que (~<~)          |
| ~__menorque~       | Comparación menor que (~>~)          |
| ~__mayorigualque~  | Comparación mayor o igual que (~>=~) |
| ~__menorigualque~  | Comparación menor o igual que (~<=~) |
| ~__igualdad~       | Igualdad (~=~)                       |
| ~__desigualdad~    | Desigualdad (~~~)                    |
| ~__y~              | Y lógico (~&~)                       |
| ~__o~              | O lógico (~¦~)                       |
| ~__cadena~         | Conversión a Cadena                  |
| ~__entero~         | Conversión a Entero                  |
| ~__decimal~        | Conversión a Decimal                 |
| ~__logico~         | Conversión a Lógico                  |
| ~__lista~          | Conversión a Lista                   |
| ~__asignacion~     | Asignación                           |
| ~__creacion~       | Inicialización                       |
| ~__destruccion~    | Destrucción                          |
| ~__obtener~        | Indizado                             |
| ~__elementos~      | Lista de elementos                   |
| ~__tamano~         | Tamaño                               |
| ~__lectmetodo~     | Lectura de un método                 |
| ~__modmetodo~      | Modificación de un método            |
| ~__elimmetodo~     | Borrado de un método                 |
| ~__copia~          | Copia de un valor                    |
| ~__iteracion~      | Iteración                            |
| ~__llamada~        | Llamada                              |

** Administración de la memoria
Linguini, por su naturaleza, no expondrá directamente la memoria al programa. Linguini reserva la memoria para cualquier nuevo objeto automáticamente, y la libera cuando un objeto ya no es usado más, así, no es necesario que el programador borre todos los objetos, a diferencia de lenguajes como C. En este caso, Linguini considerará que un objeto ya no será usado más (y en consecuencia, eliminado) cuando ya no haya ninguna variable refiriéndose a él. Esto aplica a cualquier objeto usado en el sistema, con la excepción de las clases del sistema.

Aún así, y dado que uno de los propósitos de Linguini es el de preparar al programador con buenas prácticas de desarrollo, es posible forzar la liberación de la memoria de un objeto, con la instrucción [[*Eliminar][Eliminar]].

* Sintaxis
La siguiente sección describe la sintaxis del lenguaje. 

** Nomenclatura
** Variables
** Instrucciones
*** Bloques
**** Funcion
**** Clase
**** Si
**** PorCada
**** Mientras
**** Escoger
*** Sentencias
**** Declarar
**** Asignar
**** Eliminar
**** Usar
**** Continuar
**** Regresar
**** Salir
** Expresiones
*** Operadores
Un operador
[agrupacion]
:()
^_
*/%
+-
<><=>=
=~
&|
** Tipo de archivo
Un archivo de código fuente en Linguini puede ser de dos tipos: un programa o un módulo: los programas están diseñados para ejecutarse directamente, mientras que los módulos no, sino que son para ser importados para ser usados en otros programas.
*** Programa
La estructura de un programa es como sigue:
#+begin_src bnf
  programa = "Programa " identifier newline+ sentencia*
#+end_src

*** Módulo
#+begin_src bnf
  modulo = "Modulo " identifier newline+ (usos|newline)* "Expone" newline+ (declaraciones|newline)* "Implementa" newline+ (definiciones|asignara|newline)*
#+end_src

** Lista de palabras reservadas

** ABNF
Aquí se define la sintaxis completa de Linguini en ABNF, según lo dispuesto en el [[https://datatracker.ietf.org/doc/html/rfc5234][RFC 5234]] y el [[https://datatracker.ietf.org/doc/html/rfc7405][RFC 7405]]. El código se puede validar con [[https://tools.ietf.org/tools/bap/abnf.cgi][esta herramienta del IETF]].

#+begin_src abnf
; Conjuntos auxiliares
; Cualquier caracter Unicode, excepto los bloques surrogados, 0xFFFE y 0xFFFF
CAR = %x09/%x0A/%x0D/%x20-D7FF/%xE000-FFFD/%x10000-10FFFF
ALFA = ALFAMAY/ALFAMIN ; ALPHA de ABNF
ALFAMAY = %x41-5A
ALFAMIN = %x61-7A
DGUAR = %x30-39 ; Guarismo decimal, DIGIT de ABNF
HGUAR = DGUAR/"A"/"B"/"C"/"D"/"E"/"F" ; Guarismo hexadecimal, HEXDIG de ABNF
ESP = " "/%x09 ; WSP de ABNF
SALTO = [%x0D] %x0A ; Salto de línea, Unix o Windows

; Linguini
SANG = *ESP ; Sangrado
SEP = 1*ESP ; Separador de símbolos
FINL = *ESP 1*(SALTO [*ESP COMENTARIO]); Fin de línea significativo
COMENTARIO = "#" (%x00-09/%x0B-0C/%x0E-FF) SALTO

; Estructura
UNIDAD = PROGRAMA/MODULO
PROGRAMA = SANG %s"Programa" ID FINL 1*INSTRUC [FIN]
MODULO = SANG %s"Modulo" ID FINL *USAR EXPONE [IMPLEMENTA] [FIN]
INSTRUC = BLOQUE/SENTENCIA

; Bloques
BLOQUE = FUNCION/CLASE/SI/PORCADA/MIENTRAS/ESCOGER
FUNCION = SANG %s"Funcion" SEP ID FINL [RECIBE] [MODIFICA] [DEVUELVE] 1*INSTRUC FIN
CLASE = SANG %s"Clase" SEP ID FINL [EXTIENDE] EXPONE [IMPLEMENTA] FIN
SI = SANG %s"Si" SEP EXPR FINL 1*INSTRUC *PEROSI [SINO] FIN
PEROSI = SANG %s"PeroSi" SEP EXPR FINL 1*INSTRUC
SINO = SANG %s"SiNo" FINL 1*INSTRUC
PORCADA = SANG %s"PorCada" SEP ID SEP %s"en" SEP EXPR FINL 1*INSTRUC FIN
MIENTRAS = SANG %s"Mientras" SEP EXPR FINL 1*INSTRUC FIN
ESCOGER = SANG %s"Escoger" SEP EXPR FINL 1*CASO [PREDETERMINADO] FIN
CASO = SANG %s"Caso" SEP EXPR FINL 1*INSTRUC FIN
PREDETERMINADO = SANG %s"Predeterminado" FINL 1*INSTRUC FIN
FIN = SANG %s"Fin" FINL

; Modificadores de bloques
RECIBE = SANG %s"Recibe" SEP LISTADEC FINL
MODIFICA = SANG %s"Modifica" SEP LISTADEC FINL
DEVUELVE = SANG %s"Devuelve" SEP OBJ FINL
EXTIENDE = SANG %s"Extiende" SEP OBJ FINL
EXPONE = SANG %s"Expone" FINL LISTADEC FINL
IMPLEMENTA = SANG %s"Implementa" FINL 1*(LISTADEC/ASIGNAR/FUNCION)

; Sentencias
SENTENCIA = DECLARAR/ASIGNAR/ELIMINAR/USAR/CONTINUAR/REGRESAR
DECLARAR = SANG %s"Declarar" SEP LISTADEC FINL
ASIGNAR = SANG %s"Asignar" SEP ID SEP EXPR FINL
ELIMINAR = SANG %s"Eliminar" SEP ID FINL
USAR = SANG %s"Usar" SEP LISTAEXPR FINL ; Expr: Cadena
CONTINUAR = SANG %s"Continuar" FINL
REGRESAR = SANG %s"Regresar" [SEP EXPR] FINL

; Expresiones
EXPR = BOOLEANO/NUMERO/CADENA/OBJ/LLAMADA/("[" EXPR "]")/(EXPR [SEP] OP [SEP] EXPR)
BOOLEANO =  %s"Falso"/%s"Verdadero"
NUMERO = ENTERO/DECIMAL
ENTERO = 1*DGUAR
DECIMAL = 1*DGUAR "." 1*DGUAR
CADENA = %x22 CAR %x22
OBJ = ID/(EXPR ":" ID)
ID = VARIABLE/CONSTANTE
VARIABLE = 1*ALFA *(ALFA/DGUAR/"_")
CONSTANTE = 1*ALFAMAY *(ALFAMAY/DGUAR/"_")
LLAMADA = OBJ "(" [LISTAEXPR] ")"
OP  = "^"/"$"/"*"/"/"/"%"/"+"/"-"/"<="/">="/"<"/">"/"="/"~"/"&"/"|"
LISTAID = ID ["," SEP ID]
LISTAEXPR = EXPR ["," SEP EXPR]
LISTADEC = *(OBJ SEP ID *SEP "," *SEP) OBJ SEP ID
#+end_src

* Compilador
** Parámetros
- -d :: Incluye información del código fuente original
- -f :: Número decimal, de 0 a 1023 que representa las banderas activadas. Predeterminadamente, 495 (0111101111)
- -h :: Ayuda del programa
- -i :: Nombre del archivo fuente a leer. Predeterminadamente, stdin
- -o :: Nombre del XML a escribir. Predeterminadamente, stdout
- -v :: Versión
* Intérprete
- -i :: Nombre del programa a leer. Predeterminadamente, stdin
- -m :: Rutas en dónde buscar módulos, separadas por comas
** Avisos
Clave: W: permite, con advertencia; A: permite; E: no permite
- redef :: (E) Permite redefinir variables ya definidas
- unusedobj :: (A) Permite no usar objetos declarados
- unusedparam :: (A) Permite no usar parámetros declarados en una función
- limits :: (A) Permite usar valores que se salen de sus rangos
- impconv :: (A) Permite usar conversiones implícitas mediante metamétodos
- impbool :: (E) Permite usar cualquier valor como booleano en comparaciones
- comparefloats :: (A) Permite comparar valores flotantes
- privmmethod :: (A) Permite que los metamétodos sean privados
- switchdef :: (A) Permite usar un bloque Escoger sin un bloque Predeterminado
- switchbool :: (A) Permite usar un bloque Escoger comparando un valor lógico
- all :: refiere a todos los avisos

** Bytecode

|   Tamaño | Valor          | Descripción                                           |
|----------+----------------+-------------------------------------------------------|
|        3 | 0x17 0x94 0x00 | Número mágico (0x179400)                              |
|        1 | 0x01 o 0x02    | Tipo de ejecutable (programa o módulo)                |
|        1 | -              | Tamaño del nombre del ejecutable (máx 256 caracteres) |
| Variable | -              | Nombre del ejecutable                                 |
|          |                |                                                       |
|----------+----------------+-------------------------------------------------------|

** k
Programa a
Usa "lista"
Usa "instagram" Como i

ES:imprimir("hola")

# En Linguini todas las variables se inicializan automáticamente al ser declaradas
# De ese modo, en Linguini no hay variables con valores basura
# Hay azúcar sintáctico para inicializar las clases básicas
# "a" -> cadena
# 3 -> entero
# 1.6 -> flotante
# Falso -> booleano
# Por ejemplo, un entero vale 0 inicialmente, un booleano vale Falso, y una cadena, ""

Declarar ES:Archivo f # Se inicializa, a partir de aquí es seguro usar f
f:abrir("datos.txt")
f:cerrar()

Declarar Cadena i # i = ""
Declarar Cadena j # j = ""
AsignarA j = "b"

# La asignación substituye el valor de una variable por el valor dado
# El valor que tenía la variable es destruido, y el valor dado es copiado a la memoria de la variable
AsignarA i "hola" # El valor "hola" es copiado en i
AsignarA i j # El valor de j es copiado en i

ES:imprimir(i:nombre)


Programa Chocolate

Intentar
Excepcion ArchivoNoEncontrado
  ES:imprimir("No se encontró el archivo")
Excepcion SinPermisos
  Lanzar
Finalizacion
  ES:imprimir("Esto siempre se imprime")
SiNo
  ES:imprimir("Todo salió bien")
Fin
#+end_src

* Biblioteca estándar
** Clases incluidas en el sistema
*** Objeto
*** Entero
*** Decimal
*** Cadena
*** Lista
*** Funcion
*** Logico
*** Modulo
** Bibliotecas disponibles
*** Otros tipos
**** Complejo
**** Tupla
**** Conjunto
*** Tiempo
Fecha, hora, zonas horarias, calendario
*** Matemática
**** abs()
**** nan()
**** exp()
**** ln()
**** log2()
**** log(10)
**** hipotenusa()
**** sin()
**** cos()
**** tan()
**** asin()
**** acos()
**** atan()
**** sinh()
**** cosh()
**** tanh()
**** asinh()
**** acosh()
**** atanh()
**** piso()
**** techo()
**** redondeo()
**** aleatorio()
*** Sistema
Archivos, rutas
*** E/S
**** ImprimirF
**** Persistencia
**** Contrasen̄a
**** Red
*** [#C] Compresión
**** zlib
**** gzip
**** bz2
**** lzma
**** zip
**** tar
*** Formatos
**** CSV
**** TOML
**** XML
**** JSON
**** HTML
**** Gettext
**** Dislines
*** Criptográfico
**** Hash
**** Base64
*** [#C] Internet
**** Email
**** Mailbox
**** Mimetypes
**** CGI
**** URL
**** CGI
**** Clientes
***** FTP
***** POP
***** IMAP
***** SMTP
***** HTTP
***** Telnet
*** Internacionalización
**** Locale
*** [#C] Tk
*** Metalenguaje
**** Parser
*** Desarrollo
**** Aseveracion
* PC
homepage
